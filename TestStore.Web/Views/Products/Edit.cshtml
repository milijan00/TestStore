@using TestStore.Application.Dto;
@model UpdateProductsPageDataDto;
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<section class="container mx-auto py-3">
    <article>
        <h1>Edit a  product.</h1>
     </article>
     <article >
        <form action="#" method="POST" name="updateProductForm">
            <section class="row">
                <article class="col-12 mb-3">
                    <input type="hidden" value="@Model.Product.Id" id="productId"/>
                    <input class="form-control" placeholder="Enter link name" value="@Model.Product.Name" id="productName"/>
                    <div id="productNameError" class="alert alert-danger my-2 d-none">
                        <p></p>
                    </div>
                </article>
                <article class="col-12 mb-3">
                    <label for="price" class="">Price:</label>
                    <input type="number" class="form-control" value="@Model.Product.Price" id="price"/>
                    <div id="priceError" class="alert alert-danger my-2 d-none">
                        <p></p>
                    </div>
                </article>
                <article class="col-12 mb-3">
                    <textarea rows="10" cols="20" class="form-control" placeholder="Decription"  id="description">@Model.Product.Description</textarea>
                    <div id="descriptionError" class="alert alert-danger my-2 d-none">
                        <p></p>
                    </div>
                </article>
                <article class="col-12 mb-3 ">
                    <label for="category">Choose a category</label>
                    <select class="form-control" id="category"> 
                        @foreach(var c in Model.Categories){
                            @if(c.Name == Model.Product.Category){
                            <option value="@c.Id" selected>@c.Name</option>
                            }else {
                            <option value="@c.Id">@c.Name</option>
                            }
                        }
                    </select>
                </article>
                <article class="col-12 mb-3 ">
                    <label for="category">Choose a brand</label>
                    <select class="form-control" id="brand"> 
                        @foreach(var c in Model.Brands){
                            @if(c.Name == Model.Product.Brand){
                            <option value="@c.Id" selected>@c.Name</option>
                            }else {
                            <option value="@c.Id">@c.Name</option>
                            }
                        }
                    </select>
                </article>
                <article class="col-12 mb-3">
                    <label>Choose an image</label>
                    <input type="file" class="form-control" id="imageFile"/>
                    <div id="fileError" class="alert alert-danger my-2 d-none">
                        <p></p>
                    </div>
                </article>
                <article class="mb-3">
                    <h3>Specifications</h3>
                </article>
                <section class="col-12 mb-3 row">
                    <article class="col-12 col-md-10">
                        <select id="specification" class="form-control">
                            @foreach(var s in Model.SpecificationsValues){
                                <option value="@s.SpecificationId">@s.SpecificationName - @s.Value</option>
                            }
                        </select>
                    </article>
                    <article class="col-12 col-md-2 text-end">
                        <input type="button" value="Add" class="btn btn-primary" id="addSpecificationButton"/>
                    </article>
                </section>
                <article class="col-12 mb-3" id="specificationsContent">
                @if(Model.Product.Specifications.Count() > 0){
                    <table class="table table-striped">
                        <tbody>
                           @foreach(var s in Model.Product.Specifications) {
                               <tr>
                                   <td>@s.Name</td>
                                   <td>@s.Value</td>
                                   <td width="10%"><a type="button" class="btn btn-danger remove-specification-value"  data-specificationId="@s.SpecificationId" data-productId="@Model.Product.Id" href="#">Remove</a></td>
                               </tr>
                           }
                        </tbody>
                    </table>
                    }else {
                        <article class="mb-3 ">
                            <h3>There are no specifications at the moment.</h3>
                        </article>
                    }
                </article>
                <article class="col-12 mb-3 text-end">
                    <input class="btn btn-primary" type="submit" value="Submit" />
                </article>
            </section>
        </form> 
     </article>
</section>
<section class="container mx-auto d-flex justify-content-end align-items-end pt-3">
    <div class="toast" role="alert" aria-live="assertive" aria-atomic="true">
      <div class="toast-header">
        <strong class="mr-auto">Edit product</strong>
      </div>
      <div class="toast-body">
         You have edited a  product. 
      </div>
    </div>
</section>
<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.1.3/axios.min.js" ></script>
<script type="module">
    import validation, {Validator}  from "/js/validation.js";
    import {showToast} from "/js/toast.js";
    const validator = new Validator();
    const getCurrentData = ()=>{
        return {
            name : productName.value,
            price : price.value,
            description : description.value,
            category: category.value,
            brand : brand.value,
            image : imageFile.files.length
        };
    };
    let initial = getCurrentData();

    document.updateProductForm.addEventListener("submit", function(e){
        e.preventDefault();

        validation.hideErrorBlocks(["#productNameError", "#descriptionError", "#priceError", "#fileError"]);
        validator.clearResults();
        const editedValues = getEditedValues();
        var formData = new FormData(this);
        //validation
        if(imageFile.files.length > 0){
            formData.append("image", imageFile.files[0]);
        }
        if(editedValues.productName){
                formData.append("name", editedValues.productName);
        }
        if(editedValues.description){
            formData.append("description", editedValues.description);
        }
        if(editedValues.price && Number(editedValues.price) > 0){
            formData.append("price", editedValues.price);
        }

        if(editedValues.category){
            formData.append("categoryId", editedValues.category);
        }
        if(editedValues.brand){
            formData.append("brandId", editedValues.brand);
        }
        if(formData.entries()){
            formData.append("id", productId.value);
            axios.patch("http://localhost:5257/products/update", formData)
            .then(res => {
                if(res.status == 204){
                    showToast();
                    initial = getCurrentData();
                }
            })
            .catch(e =>{
                console.error(e);
            });

        }else {
            validation.displayErrorMessages(validator.result.errors);
        }
    });

    const getEditedValues = ()=>{
        let edited = {};
        if(initial.name != productName.value){
            edited.productName = productName.value;
        }

        if(initial.price != price.value){
            edited.price = price.value;
        }

        if(initial.description != description.value){
            edited.descripton = description.value;
        }

        if(initial.category != category.value){
            edited.category = category.value;
        }

        if(initial.brand != brand.value){
            edited.brand = brand.value;
        }
        if(initial.image > 0){
            edited.imageName = image.files[0];
        }

        return edited;
    }

    addSpecificationButton.addEventListener("click", function(e){
        e.preventDefault();
        $.ajax({
            url : "http://localhost:5257/products/addspecification",
            data : {
                productId : productId.value,
                specificationId : specification.value
            },
            method : "POST",
            success(result){
                displaySpecificationsValues(result);
            },
            error(xhr, status, error){
                if(xhr.status == 422){
                    alert(xhr.responseJSON[0].errorMessage);
                }
            }
        });
    });
    const addEventListenerToRemoveButtons = ()=>{
        $(".remove-specification-value").click(function(e){
            e.preventDefault();
            // prodict id, specification name, specification value
            const data = {
                specificationId : this.getAttribute("data-specificationId"),
                productId : this.getAttribute("data-productId")
            };

            $.ajax({
                url : "http://localhost:5257/products/removespecification?specificationId=" + data.specificationId + "&productId=" + data.productId,
                method : "DELETE",
                success(result){
                    // ovde treba poslati zahtev za dohvatanje specifikacija
                    displaySpecificationsValues(result);
                },
                error(e){
                    console.error(e);
                }
            })
        });
    };

    function displaySpecificationsValues( elements){

        if(elements == null || elements.length == 0){
            return `
                <h3>There are no specifications for this product at the moment.</h3> 
            `;
        }
        let html = `
            <table class="table table-striped">
                <tbody>
        `;

        for(let s of elements){
            html += `
               <tr>
                   <td>${s.name}</td>
                   <td>${s.value}</td>
                   <td width="10%"><input type="button" class="btn btn-danger remove-specification-value" data-specificationId="${s.specificationId}" data-productId="${productId.value}" value="Remove" /></td>
               </tr>
            `;
        }

        html += `
                        </tbody>
                    </table>
        `;

        $("#specificationsContent").html(html);
        addEventListenerToRemoveButtons();
    }
    addEventListenerToRemoveButtons();   

</script>
